buildscript {scriptHandler->
    apply from: '../../repositories.gradle', to: scriptHandler
    apply from: '../../dependencies.gradle'
    dependencies {
      classpath(project.ext.build.xtend_android_gradle)
      classpath(project.ext.build.xtend_gradle)
      classpath(project.ext.build.android_gradle) // binding is supported >1.5
    }
}

apply plugin: 'com.android.application'
apply plugin: 'org.xtext.android.xtend'
apply from: '../../dependencies.gradle'

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile(project.ext.lib.xtend)
  compile(project.ext.lib.android.support_v4)
  compile(project.ext.lib.android.appcompat_v7)
  compile project(':Xtendroid')
}

repositories {
   jcenter()
}

android {
  compileSdkVersion(project.ext.compileSdkVersion)
  buildToolsVersion(project.ext.buildToolsVersion)

  defaultConfig.applicationId 'com.example.quotes'

  // android gradle >1.5 supports binding
  dataBinding {
    enabled = true
  }

  sourceSets {
    main {
      manifest { srcFile 'AndroidManifest.xml' }
      java.srcDirs = ['src'/*, 'build/intermediates/classes/debug'*/ ]
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
      resources.srcDirs += ['src']
      aidl.srcDirs = ['src']
    }

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_7
      targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
      release {
        minifyEnabled false
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      }
    }

    lintOptions {
      abortOnError false
    }
  }
}

/*
// Shit circular dependency!
project.afterEvaluate {
  android.applicationVariants.all { variant ->

    // force ordering on the tasks
    def variantName = variant.name.capitalize()
    tasks["generate${variantName}Xtext"].mustRunAfter tasks["generate${variantName}Sources"] //tasks["compile${variantName}JavaWithJavac"]

    // add srcDir, depending on the variant
    def sourceDir = "${buildDir}/generated/source/xtend/${variant.dirName}"
    variant.addJavaSourceFoldersToModel new File(sourceDir)
  }
}
*/

// Clone a task, then run it to break the cyclic dependency
project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        project.tasks.create(name: "preProcess${variantName}DataBinding", /*dependsOn: "process${variantName}Resources",*/ type: org.gradle.api.tasks.compile.JavaCompile) {
            println 'Attempting to generate data binding classes and compile them first'
            mustRunAfter "process${variantName}Resources"
            dependsOn "process${variantName}Resources"
        }
    }
}


/*
// Debugging!
project.tasks.whenTaskAdded { task ->
    doLast {
        FileTree tree = fileTree(dir: 'build/intermediates/classes', include: '** /*.java') // TODO to activate stick the * / together
        tree.each {File file ->
            if (file.name.endsWith('Binding.java') || file.name.equals('BR.java')) {
                println task.toString() + ':' + file.toString()
            }
        }
    }
}
*/

