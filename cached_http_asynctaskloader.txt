// the id assignment should be done by the (support) loader manager

@AndroidLoader
@AndroidRestful(method="POST", url="https://path/:var1/?meh=:var2", cached=true, cached_ttl=1234, deferred=true, deferred_ttl=-1, file_access_type=info.guardianproject.iocipher.File) // creates getter setter for var1 and var2
// @GET, @POST, @PUT, @DELETE, @HEAD, @TRACE
class MySuperLoader extends ..support...AsyncTaskLoader<KlassAnnotatedWithJsonProperty>
{

/*
    public new(String var1, String var2, ...)
    {
        // pre-generated
    }
*/
    // pre-injected into the connection object, before making the call
    @Header("Accept-type")
    var acceptType = "some default value"

    @Header("Meh")
    var meh

    @Header
    var Map<String, String> map
    
    @Submit
    def byte[] call(/* in case of POST or PUT, there must be a byte[], char[], String as a variable here */)
    {
        // last minute changes to the request object
        // default to get, unless you change the method to post
        // when this class is instantiated, if the call is deferred
        
        // The call will be constructed here, it consists of three parts
        // 1) Last minute changes to headers, url params, etc.
        // 2) Plumbing to actually make the http(s) call
        // 3) Process results depending on the result code, headers etc.,
        
        // Caveat: all the @Result-annotated methods must have the same return type as submit
    }
    
    @Result(status=404)
    def byte[] handle404(char[] chars)
    {
       // throw error so something
    }
    
    @Result(status=200, header="Accept-type: regexp") // probably not possible
    def byte[] handle2xx(byte[] bytes)
    {
    
    }
    
    @Result
    def byte[] handleAll(String rawJson)
    {
    
    }
    
    @Redirect
    def byte[] whatToDo()
}

/*
// cached, cached_ttl

Store result (and encrypt with iocipher), you might need a new "@BeforeCache(ttl=1234) def preProcess(byte[] bytes)" annotation for this.
The annotation marks a method, so that is run before the actual caching starts.

... @AfterCache

// deferred, deferred_ttl, JSON

Convert call details (to make a complete call) to a JSON raw string, and store it to disk.

JSON:

{
        "deferredOnDateTime"  : 12341234123412341234,
        "deferredTtl"         : 1234,        
        "cacheResult"         : true, // just store everything, TODO use defined methods to CRUD results (security?), iocipher should be enough
        "url"                 : {
                                        "re"         : "http://meh.com/:hmf/?a=:bleh",
                                        "parameters" : [  {"hmf" : "something"}, {"bleh" : "somethingelse"} ] 
                                },
        "headers"             : [ "Accept-type: aoeuaoeu" ]        
}

*/

// also
@AndroidAsyncTask
@AndroidRestful...
class MySuperAsyncTask extends AsyncTask<A, B, C>
{
        ...
}
